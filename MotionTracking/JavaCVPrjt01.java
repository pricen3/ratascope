package motion_tracking;

// Video path "C:/Users/e6440/Downloads/coffee.mp4"
// Video mouse "C:/Users/e6440/Downloads/mouse_vid1.mp4"
// Video mouse PI : "home/pi/Desktop/mouse_vid1.mp4"
import java.awt.image.BufferedImage;

import java.awt.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.DirectoryStream;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
 
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
 
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.core.MatOfPoint;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.highgui.Highgui;
import org.opencv.highgui.VideoCapture;
import org.opencv.imgproc.Imgproc;
import org.opencv.video.BackgroundSubtractorMOG2;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class JavaCVPrjt01 {
    static {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }
 
    static Mat imag = new Mat();
    static Mat imag2 = new Mat();
 
    public static void main(String[] args) {
    	//System.out.println("Starting program");
        Path dir = FileSystems.getDefault().getPath("C:/Users/e6440/MotionTracking/Videos/");
        File folder = new File("C:/Users/e6440/MotionTracking/Videos/");
        while(true) {
        	try {
				if (isDirEmpty(dir)) {
					//System.out.println("The directory is not empty");
					String fileEntry = getFile(folder);
					calculate(fileEntry);
					moveVideo(fileEntry);
				} else {
					System.out.println("The directory IS empty");
					Thread.sleep(1000);
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }
    }
 
    public static boolean isDirEmpty(final Path directory) throws IOException {
        try(DirectoryStream<Path> dirStream = Files.newDirectoryStream(directory)) {
            return dirStream.iterator().hasNext();
        }
    }
    
    public static String getFile(final File folder) {
    	String filename = "";
        for (final File fileEntry : folder.listFiles()) {
            filename = fileEntry.toString();
        }
        return filename;
    }
    
    public static void calculate(String fileName) throws Exception {
    	JFrame jframe = new JFrame("Circardian and Movement Phenotype Recorder (CAMPR)");
        jframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        JLabel vidpanel = new JLabel();
        jframe.setContentPane(vidpanel);
        jframe.setPreferredSize(new Dimension(960, 720));
        jframe.setMinimumSize(new Dimension(960, 720));
        jframe.pack();
        jframe.setVisible(true);
        jframe.setState(Frame.ICONIFIED);
        jframe.setState(Frame.NORMAL);
        
    	Mat frame = new Mat();
        VideoCapture camera = new VideoCapture();
        if (camera.open(fileName)) {
        	//System.out.println("File opened succesfully.");
        } else {
        	//System.out.println("Cannot open file.");
        	System.exit(0);
        }
        
        Size sz = new Size(960, 720);
        Mat fgMaskMOG2 = new Mat(); //fg mask fg mask generated by MOG2 method
        BackgroundSubtractorMOG2 mog2 = new BackgroundSubtractorMOG2(200, 50f, true);
        Mat imgH = new Mat();
        double startTime = System.nanoTime();
        
        BufferedWriter bw = null;
        String[] pathName = fileName.split("\\\\");
        String file = pathName[5].toString();
        String[] vidName = file.split("\\.");
        String filePath = "C:/Users/e6440/MotionTracking/CSV/" + vidName[0].toString() +".csv";
       	File csvOutput = new File(filePath);
       	FileWriter fw = new FileWriter(csvOutput);
       	bw = new BufferedWriter(fw);
       	
    	int toply = 0;
		int toplx = 0;
		int ptoply = 0;
		int ptoplx = 0;
		
        while (camera.read(frame)) {
        	//System.out.println("Reading frames succesfully.");
        	Imgproc.resize(frame, frame, sz);
        	imgH = frame.clone();
        	Imgproc.cvtColor(imgH, imgH, Imgproc.COLOR_RGB2GRAY);
        	Imgproc.GaussianBlur(imgH, imgH, new Size(17, 17), 0);
        	imgH.convertTo(imgH, -1, 1, 1);
        	mog2.apply(imgH, fgMaskMOG2, 0.0009);
        	
        	double endTime = System.nanoTime();
        	double totalTime = (endTime - startTime) / (1000000000);
        	
        	Rect r = detect_mouse(fgMaskMOG2);
        	if (r != null) {
        		if (toplx == 0) {
        			toplx = (int) r.tl().x;
        			ptoplx = toplx;
        			toply = (int) r.tl().y;
        			ptoply = toply;
        		} else {
        			if ((r.tl().x > (toplx-30)) && (r.tl().x < (toplx+30))) {
        				toplx = (int) r.tl().x;
        				// write to CSV here?
        				ptoplx = toplx;
        			}
        			if ((r.tl().y > (toply-30)) && (r.tl().y < (toply+30))) {
        				toply = (int) r.tl().y;
        				// write to CSV here?
        				ptoply = toply;
        			}
        		}
        	}
        	if (toply != 0) {
        		org.opencv.core.Point tl = new org.opencv.core.Point(toplx, toply);
        		org.opencv.core.Point br = new org.opencv.core.Point(toplx+175, toply+175);
        		// Rectangle: image, top_left, bottom_right, color, thickness
        		Core.rectangle(frame, tl, br, new Scalar(0, 255, 0), 2);
        		int movedUD = Math.abs(toply-ptoply);
        		int movedLR = Math.abs(toplx-ptoplx);
        		int againstWall = 0;
        		if (toply < 95) {
        			againstWall = 1;
        		} if (toplx < 90) {
        			againstWall = 1;
        		} if ((toply + 75) > 590) {
        			againstWall = 1;
        		} if ((toplx + 75) > 830) {
        			againstWall = 1;
        		}
        		if (againstWall == 1) {
            		org.opencv.core.Point tl2 = new org.opencv.core.Point(90, 95);
            		org.opencv.core.Point br2 = new org.opencv.core.Point(830, 590);
            		Core.rectangle(frame, tl2, br2, new Scalar(255, 0, 0), 2);
        		}
        		// Time, DistanceUPorDOWN, DistanceLEFTorRIGHT, Next_to_Wall
        		bw.write(totalTime + "," + movedUD + "," + movedLR + "," + againstWall);
				bw.newLine();
        	}
            ImageIcon image = new ImageIcon(Mat2bufferedImage(frame));
            vidpanel.setIcon(image);
            vidpanel.repaint();
        }
        System.out.println("Should be closing jframe.");
        jframe.dispose();
        camera.release();
        bw.close();
    }
    
    public static BufferedImage Mat2bufferedImage(Mat image) {
        MatOfByte bytemat = new MatOfByte();
        Highgui.imencode(".jpg", image, bytemat);
        byte[] bytes = bytemat.toArray();
        InputStream in = new ByteArrayInputStream(bytes);
        BufferedImage img = null;
        try {
            img = ImageIO.read(in);
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return img;
    }
 
    public static Rect detect_mouse(Mat outmat) {
    	Mat v = new Mat();
        List<MatOfPoint> contours = new ArrayList<MatOfPoint>();
        Imgproc.findContours(outmat, contours, v, Imgproc.RETR_LIST,
                Imgproc.CHAIN_APPROX_SIMPLE);

        Rect r = null;
        int tleftx = 10000000;
        int tlefty = 10000000;
        int brightx = 0;
        int brighty = 0;
        boolean ignore = false;
        
        for (int idx=1; idx<contours.size(); idx++) {
            r = Imgproc.boundingRect(contours.get(idx));
            if (r.tl().x < tleftx) {
            	tleftx = (int) r.tl().x;
            }
            if (r.tl().y < tlefty) {
            	tlefty = (int) r.tl().y;
            }
            if (r.br().x > brightx) {
            	brightx = (int) r.br().x;
            }
            if (r.br().y > brighty) {
            	brighty = (int) r.br().y;
            }
        }
        int width = brightx - tleftx;
        int height = brighty - tlefty;
        if ((width < 75) || (height < 75)) {
        	ignore = true;
        } else {
        	if (width != 175) {
        		width = 175;
        	}
        	if (height != 175) {
        		height = 175;
        	}
        }
        if (ignore == false) {
        	r = new Rect(tleftx, tlefty, width, height);
        } else {
        	r = null;
        }
        v.release();
        return r;
    }
    
    public static void moveVideo(String preVideo) {
    	File video = new File(preVideo);
    	String[] pathName = preVideo.split("\\\\");
        String file = pathName[5].toString();
        String[] vidName = file.split("\\.");
        String filePath = "C:/Users/e6440/MotionTracking/Processed_Videos/" + vidName[0].toString() +".mp4";
		video.renameTo(new File(filePath));
    }
}